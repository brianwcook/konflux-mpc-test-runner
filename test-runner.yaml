apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: test, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/multi-platform-required: "true"
  name: test-runner-mpc
spec:
  description: test-runner-mpc
  params:
  - description: The platform to build on
    name: PLATFORM
    type: string
  stepTemplate:
    env:
    - name: GIT_URL
      value: $(params.GIT_URL)
    - name: TEST_SCRIPT
      value: $(params.TEST_SCRIPT)
    computeResources: {}
  steps:
  - env:
    - name: COMMIT_SHA
      value: "foo"
    image: quay.io/redhat-appstudio/multi-platform-runner:01c7670e81d5120347cf0ad13372742489985e5f@sha256:246adeaaba600e207131d63a7f706cffdcdc37d8f600c56187123ec62823ff44
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    name: build
    computeResources:
      limits:
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 128Mi
    # the next script currently runs a bunch of stuff related to transferring workspace data, then rpm-ostree compose.  I need to make it run git clone, then execute the test script.
    script: |-
      set -o verbose
      set -eu
      set -o pipefail
      mkdir -p ~/.ssh
      if [ -e "/ssh/error" ]; then
        #no server could be provisioned
        cat /ssh/error
        exit 1
      elif [ -e "/ssh/otp" ]; then
       curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
       echo "" >> ~/.ssh/id_rsa
      else
        cp /ssh/id_rsa ~/.ssh
      fi
      chmod 0400 ~/.ssh/id_rsa
      export SSH_HOST=$(cat /ssh/host)
      export BUILD_DIR=$(cat /ssh/user-dir)
      export SSH_ARGS="-o StrictHostKeyChecking=no"
      mkdir -p scripts
      echo "$BUILD_DIR"
      ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp"

      rsync -ra $(workspaces.source.path)/ "$SSH_HOST:$BUILD_DIR/workspaces/source/"
      cat >scripts/script-build.sh <<'REMOTESSHEOF'
      #!/bin/sh
      set -o verbose
      cd $(workspaces.source.path)
      if [ -z "$CONFIG_FILE" ] ; then
        CONFIG_FILE_ARG=""
      else
        CONFIG_FILE_ARG="  --image-config=source/$CONFIG_FILE "
      fi

      
      # rpm-ostree compose image --initialize --format oci $CONFIG_FILE_ARG "source/$IMAGE_FILE" rhtap-final-image
      # REMOTESSHEOF
      # will add test script runner here
      
      # Hardcode result for now.
      RESULT=SUCCESS

    securityContext:
      capabilities:
        add:
        - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /ssh
      name: ssh
      readOnly: true
    workingDir: $(workspaces.source.path)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - name: ssh
    secret:
      optional: false
      secretName: multi-platform-ssh-$(context.taskRun.name)
  workspaces:
  - description: Workspace containing the source code to build.
    name: source
